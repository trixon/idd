/* 
 * Copyright 2018 Patrik Karlstr√∂m.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.idnb;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import se.trixon.almond.util.Dict;
import se.trixon.almond.util.icons.IconColor;
import se.trixon.almond.util.icons.material.MaterialIcon;
import se.trixon.almond.util.swing.dialogs.Message;
import se.trixon.idl.FrameImageCarrier;
import se.trixon.idl.client.Client;
import se.trixon.idl.client.ClientListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.trixon.idnb//Frame//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrameTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "se.trixon.idnb.FrameTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrameAction",
        preferredID = "FrameTopComponent"
)
@Messages({
    "CTL_FrameAction=IDD",
    "CTL_FrameTopComponent=IDD"
})
public final class FrameTopComponent extends TopComponent {

    private static final Logger LOGGER = Logger.getLogger(FrameTopComponent.class.getName());
    private final Client mClient = new Client();

    public FrameTopComponent() {
        initComponents();
        setName(Bundle.CTL_FrameTopComponent());

        init();
    }

    private void init() {
        mClient.addClientListener(new ClientListener() {
            @Override
            public void onClientConnect() {
                System.out.println("we did connect");
            }

            @Override
            public void onClientDisconnect() {
                System.out.println("we did disconnect");
            }

            @Override
            public void onClientReceive(FrameImageCarrier frameImageCarrier) {
                System.out.println("we received a FrameImageCarrier");
                System.out.println(frameImageCarrier);
                imagePanel.setImage(frameImageCarrier.getRotatedBufferedImage());
            }

            @Override
            public void onClientRegister() {
                System.out.println("we did register");
            }
        });

        connectButton.setIcon(MaterialIcon._Communication.CALL.get(22, IconColor.getDefault()));
        disconnectButton.setIcon(MaterialIcon._Communication.CALL_END.get(22, IconColor.getDefault()));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        connectButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        hostTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        imagePanel = new se.trixon.almond.util.swing.ImagePanel();

        setLayout(new java.awt.BorderLayout());

        toolBar.setRollover(true);

        connectButton.setFocusable(false);
        connectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        connectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        toolBar.add(connectButton);

        disconnectButton.setFocusable(false);
        disconnectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        disconnectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });
        toolBar.add(disconnectButton);

        hostTextField.setColumns(10);
        hostTextField.setText("localhost"); // NOI18N
        toolBar.add(hostTextField);

        portTextField.setColumns(10);
        portTextField.setText("5705"); // NOI18N
        toolBar.add(portTextField);

        add(toolBar, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 623, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 316, Short.MAX_VALUE)
        );

        add(imagePanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            mClient.setHost(hostTextField.getText());
            mClient.setPort(portTextField.getText());
            mClient.connect();
            mClient.register();
        } catch (MalformedURLException | SocketException ex) {
            Message.error(this, Dict.Dialog.ERROR.toString(), ex.getMessage());
            LOGGER.log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Message.error(this, Dict.Dialog.ERROR.toString(), ex.getMessage());
            LOGGER.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        mClient.disconnect();
    }//GEN-LAST:event_disconnectButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JTextField hostTextField;
    private se.trixon.almond.util.swing.ImagePanel imagePanel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        p.setProperty("host", hostTextField.getText());
        p.setProperty("port", portTextField.getText());
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        hostTextField.setText(p.getProperty("host", "localhost"));
        portTextField.setText(p.getProperty("port", "5705"));
    }
}
